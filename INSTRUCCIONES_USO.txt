================================================================================
INSTRUCCIONES DE USO - SIMULADOR DE ENFRIAMIENTO GPU
Sistema de Transferencia de Calor con Aletas Cil√≠ndricas
================================================================================

CONTENIDO:
  1. Requisitos previos
  2. Ejecuci√≥n en Terminal
  3. Ejecuci√≥n en Jupyter Notebook
  4. Ejecuci√≥n en Spyder
  5. Interfaz Web (Streamlit)
  6. Interpretaci√≥n de resultados
  7. Soluci√≥n de problemas

================================================================================
1. REQUISITOS PREVIOS
================================================================================

Antes de ejecutar el simulador, aseg√∫rate de tener instaladas las dependencias:

  cd /Users/randallbonilla/Desktop/python-adrian
  pip install -r requirements.txt

Paquetes necesarios:
  - numpy
  - scipy
  - matplotlib
  - streamlit (opcional, solo para interfaz web)

================================================================================
2. EJECUCI√ìN EN TERMINAL
================================================================================

2.1. M√âTODO DIRECTO (Recomendado)
----------------------------------

Navega al directorio del proyecto y ejecuta:

  cd /Users/randallbonilla/Desktop/python-adrian
  python3 test_solucionador.py

Ver√°s el progreso en tiempo real con actualizaciones cada 200 pasos.

2.2. CON REDIRECCI√ìN A ARCHIVO LOG
-----------------------------------

Para guardar la salida en un archivo:

  python3 test_solucionador.py > simulacion_log.txt 2>&1

Para ver y guardar simult√°neamente:

  python3 test_solucionador.py 2>&1 | tee simulacion_log.txt

2.3. EN SEGUNDO PLANO (Background)
-----------------------------------

Para ejecutar sin bloquear la terminal:

  nohup python3 test_solucionador.py > output.log 2>&1 &

Para ver el progreso:

  tail -f output.log

Para detener el proceso:

  pkill -f test_solucionador

2.4. PAR√ÅMETROS PERSONALIZABLES
--------------------------------

Puedes modificar el archivo test_solucionador.py (l√≠neas 35-43):

  - t_max: Tiempo m√°ximo de simulaci√≥n (por defecto 30.0 s)
  - epsilon: Criterio de convergencia (por defecto 1e-3 K/s)
  - guardar_cada: Frecuencia de guardado (por defecto 200 pasos)
  - calcular_balance: Activar balance energ√©tico (True/False)

Ejemplo de modificaci√≥n:

  # Simulaci√≥n m√°s r√°pida (10 segundos)
  resultados = resolver_sistema(
      params=params,
      mallas=mallas,
      t_max=10.0,          # <-- Cambiar aqu√≠
      epsilon=1e-3,
      guardar_cada=100,    # <-- Guardar m√°s frecuentemente
      calcular_balance=True,
      verbose=True
  )

================================================================================
3. EJECUCI√ìN EN JUPYTER NOTEBOOK
================================================================================

3.1. CREAR UN NOTEBOOK
-----------------------

1. Abre Jupyter Notebook o JupyterLab:

   jupyter notebook

2. Navega a: /Users/randallbonilla/Desktop/python-adrian

3. Crea un nuevo notebook: New > Python 3

3.2. C√ìDIGO PARA EJECUTAR EN JUPYTER
-------------------------------------

Copia y pega en celdas separadas:

# CELDA 1: Imports y setup
import sys
sys.path.insert(0, '/Users/randallbonilla/Desktop/python-adrian')

from src.parametros import Parametros
from src.mallas import generar_todas_mallas
from src.solucionador import resolver_sistema
import numpy as np
import matplotlib.pyplot as plt

# CELDA 2: Configurar par√°metros
print("üîß Configurando simulaci√≥n...")
params = Parametros(material="Al")
mallas = generar_todas_mallas(params)
print("‚úÖ Listo!")

# CELDA 3: Ejecutar simulaci√≥n (esto toma tiempo!)
print("üöÄ Ejecutando simulaci√≥n...")
resultados = resolver_sistema(
    params=params,
    mallas=mallas,
    t_max=10.0,           # 10 segundos para prueba r√°pida
    epsilon=1e-3,
    guardar_cada=100,
    calcular_balance=True,
    verbose=True
)
print("‚úÖ Simulaci√≥n completada!")

# CELDA 4: An√°lisis r√°pido
tiempo = resultados['tiempo']
T_fluido = resultados['T_fluido']
T_placa = resultados['T_placa']

print(f"Tiempo simulado: {tiempo[-1]:.2f} s")
print(f"Puntos guardados: {len(tiempo)}")
print(f"Convergencia: {resultados['convergencia']['alcanzada']}")

# CELDA 5: Gr√°fico r√°pido
plt.figure(figsize=(12, 4))

# Temperatura promedio de cada dominio
plt.subplot(1, 2, 1)
T_f_mean = [T.mean() - 273.15 for T in T_fluido]
T_p_mean = [T.mean() - 273.15 for T in T_placa]
T_a_mean = [np.mean([Ta.mean() for Ta in Tas]) - 273.15 
            for Tas in resultados['T_aletas']]

plt.plot(tiempo, T_f_mean, 'b-', label='Fluido', linewidth=2)
plt.plot(tiempo, T_p_mean, 'r-', label='Placa', linewidth=2)
plt.plot(tiempo, T_a_mean, 'g-', label='Aletas', linewidth=2)
plt.xlabel('Tiempo (s)')
plt.ylabel('Temperatura (¬∞C)')
plt.title('Evoluci√≥n T√©rmica')
plt.legend()
plt.grid(True, alpha=0.3)

# Balance energ√©tico
plt.subplot(1, 2, 2)
if resultados['metricas']['balance']:
    balance = resultados['metricas']['balance']
    t_balance = [b['tiempo'] for b in balance]
    Q_in = [b['Q_in'] for b in balance]
    plt.plot(t_balance, Q_in, 'k-', linewidth=2)
    plt.xlabel('Tiempo (s)')
    plt.ylabel('Q_in (W)')
    plt.title('Potencia de Entrada')
    plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

3.3. AN√ÅLISIS AVANZADO EN JUPYTER
----------------------------------

# Campo de temperaturas de la placa (√∫ltimo instante)
T_p_final = T_placa[-1]

plt.figure(figsize=(10, 6))
plt.imshow(T_p_final.T - 273.15, 
           aspect='auto', 
           origin='lower', 
           cmap='hot',
           extent=[0, params.L_x*1000, 0, params.L_y*1000])
plt.colorbar(label='Temperatura (¬∞C)')
plt.xlabel('x (mm)')
plt.ylabel('y (mm)')
plt.title('Campo de Temperatura en la Placa (final)')
plt.tight_layout()
plt.show()

================================================================================
4. EJECUCI√ìN EN SPYDER
================================================================================

4.1. ABRIR SPYDER
-----------------

1. Inicia Spyder desde terminal:

   spyder

2. O desde Anaconda Navigator (si lo usas)

4.2. CONFIGURAR DIRECTORIO DE TRABAJO
--------------------------------------

En la consola de Spyder:

  import os
  os.chdir('/Users/randallbonilla/Desktop/python-adrian')
  print(os.getcwd())  # Verificar

4.3. EJECUTAR EL SCRIPT
-----------------------

OPCI√ìN A: Ejecuci√≥n completa del archivo

  1. Abre test_solucionador.py en Spyder (File > Open)
  2. Presiona F5 o Run > Run
  3. El progreso aparecer√° en la consola IPython

OPCI√ìN B: Ejecuci√≥n l√≠nea por l√≠nea (debugging)

  1. Abre test_solucionador.py
  2. Coloca breakpoints haciendo clic a la izquierda del n√∫mero de l√≠nea
  3. Presiona Ctrl+F5 o Debug > Debug
  4. Usa F10 (step over) o F11 (step into)

OPCI√ìN C: Ejecutar desde consola IPython

En la consola de Spyder:

  %run test_solucionador.py

4.4. TIPS PARA SPYDER
---------------------

- Variable Explorer: Ver todas las variables en tiempo real
- Plots: Los gr√°ficos aparecen en el panel "Plots" (puedes hacerlos inline)
- Console: Puedes interactuar con los resultados despu√©s de la ejecuci√≥n
- Editor: Syntax highlighting y autocompletado disponible

Para hacer gr√°ficos inline en Spyder:

  Tools > Preferences > IPython console > Graphics > Backend: Inline

================================================================================
5. INTERFAZ WEB (STREAMLIT) - RECOMENDADO
================================================================================

5.1. INSTALACI√ìN
----------------

  pip install streamlit

5.2. LANZAR LA INTERFAZ WEB
----------------------------

  cd /Users/randallbonilla/Desktop/python-adrian
  streamlit run interfaz_web.py

Esto abrir√° autom√°ticamente tu navegador en http://localhost:8501

5.3. USO DE LA INTERFAZ WEB
----------------------------

La interfaz incluye:

  ‚úÖ Panel de configuraci√≥n interactivo
     - Selecci√≥n de material (Aluminio / Acero Inoxidable)
     - Tiempo de simulaci√≥n ajustable
     - Criterio de convergencia
  
  ‚úÖ Bot√≥n de inicio de simulaci√≥n
  
  ‚úÖ Barra de progreso en tiempo real
  
  ‚úÖ Visualizaci√≥n de resultados:
     - Gr√°ficos de evoluci√≥n t√©rmica
     - Campos de temperatura 2D
     - M√©tricas del sistema
  
  ‚úÖ Descarga de resultados en formato .npz

5.4. DETENER LA INTERFAZ
------------------------

En la terminal donde ejecutaste streamlit, presiona:

  Ctrl + C

================================================================================
6. INTERPRETACI√ìN DE RESULTADOS
================================================================================

6.1. SALIDA EN TERMINAL
-----------------------

Durante la ejecuci√≥n ver√°s:

  t=  5.00s | max|dT/dt|=1.24e+00 K/s | T_f= 29.3¬∞C | T_p= 29.3¬∞C | T_a= 29.0¬∞C
         Balance: Q_in=88.3W, Error=39.35%

Interpretaci√≥n:

  - t: Tiempo actual de la simulaci√≥n
  - max|dT/dt|: M√°xima tasa de cambio de temperatura (convergencia ‚Üí 0)
  - T_f: Temperatura promedio del fluido
  - T_p: Temperatura promedio de la placa
  - T_a: Temperatura promedio de las aletas
  - Q_in: Potencia de entrada (calor del fluido)
  - Error: Error del balance energ√©tico (aceptable <40% en transitorios)

6.2. ARCHIVOS DE SALIDA
------------------------

Los resultados se guardan autom√°ticamente en:

  resultados/datos/resultados_<Material>.npz

Para cargar los resultados:

  import numpy as np
  
  data = np.load('resultados/datos/resultados_Aluminio.npz', allow_pickle=True)
  
  tiempo = data['tiempo']
  T_fluido = data['T_fluido']
  T_placa = data['T_placa']
  T_aletas = data['T_aletas']
  convergencia = data['convergencia'].item()
  metricas = data['metricas'].item()

6.3. CRITERIOS DE √âXITO
------------------------

‚úÖ Simulaci√≥n exitosa si:

  1. max|dT/dt| disminuye continuamente
  2. T_fluido alcanza ~80¬∞C r√°pidamente (<1s)
  3. T_placa aumenta gradualmente
  4. T_aletas sigue de cerca a T_placa
  5. Balance energ√©tico: Error <40% (transitorio) o <10% (estacionario)
  6. No aparecen temperaturas NaN o Inf

‚ö†Ô∏è Revisar si:

  1. max|dT/dt| no disminuye ‚Üí aumentar t_max
  2. Error balance >50% ‚Üí revisar par√°metros
  3. Temperaturas negativas ‚Üí error num√©rico
  4. T_aletas >> T_placa ‚Üí error de acoplamiento

================================================================================
7. SOLUCI√ìN DE PROBLEMAS
================================================================================

PROBLEMA: "ModuleNotFoundError: No module named 'src'"
SOLUCI√ìN: 
  - Verifica que est√°s en el directorio correcto
  - Ejecuta: cd /Users/randallbonilla/Desktop/python-adrian
  - O agrega: sys.path.insert(0, '/ruta/completa/al/proyecto')

PROBLEMA: La simulaci√≥n es muy lenta
SOLUCI√ìN:
  - Reduce t_max a 10.0 segundos
  - Aumenta guardar_cada a 500 o 1000
  - Usa material="Al" (m√°s r√°pido que "SS")
  - Desactiva calcular_balance=False

PROBLEMA: "KeyboardInterrupt" al intentar detener
SOLUCI√ìN:
  - Es normal, simplemente presiona Ctrl+C de nuevo
  - O usa: pkill -f test_solucionador

PROBLEMA: Error "Memory Error"
SOLUCI√ìN:
  - Reduce t_max
  - Aumenta guardar_cada (guarda menos puntos)
  - Cierra otros programas

PROBLEMA: Resultados no f√≠sicos (temperaturas negativas/muy altas)
SOLUCI√ìN:
  - Revisa que requirements.txt est√© instalado correctamente
  - Verifica versiones: python3 --version (debe ser >=3.8)
  - Contacta al desarrollador si persiste

PROBLEMA: No se crea el archivo .npz
SOLUCI√ìN:
  - Verifica que el directorio resultados/datos/ existe
  - Verifica permisos de escritura
  - Ejecuta: mkdir -p resultados/datos

PROBLEMA: La interfaz Streamlit no abre
SOLUCI√ìN:
  - Verifica instalaci√≥n: pip install streamlit
  - Abre manualmente: http://localhost:8501
  - Revisa el firewall si no carga

================================================================================
TIEMPOS ESTIMADOS DE EJECUCI√ìN
================================================================================

Con configuraci√≥n por defecto (Aluminio, 60,000 pasos):

  t_max = 10.0 s  ‚Üí ~2-3 minutos de ejecuci√≥n
  t_max = 30.0 s  ‚Üí ~5-7 minutos de ejecuci√≥n
  t_max = 60.0 s  ‚Üí ~10-15 minutos de ejecuci√≥n

El tiempo depende de:
  - Velocidad del procesador
  - Material (Al m√°s r√°pido que SS)
  - Frecuencia de guardado (guardar_cada)
  - Balance energ√©tico (aumenta ~20% el tiempo)

================================================================================
CONTACTO Y SOPORTE
================================================================================

Proyecto: Sistema de Enfriamiento GPU con Aletas Cil√≠ndricas
Versi√≥n: 1.0
Fecha: Octubre 2025

Para reportar problemas o sugerencias:
  - Revisa la documentaci√≥n en contexto/
  - Consulta worklog.md para historial de cambios
  - Revisa docs/ para validaciones de solvers individuales

================================================================================
FIN DE INSTRUCCIONES
================================================================================
